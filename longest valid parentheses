class Solution:
    def longestValidParentheses(self, s: str) -> int:
        # Initialize stack with -1 to handle the base case
        stack = [-1]
        max_length = 0

        # Traverse through the string
        for i, char in enumerate(s):
            if char == '(':
                # Push the index of '(' onto the stack
                stack.append(i)
            else:
                # Pop the top of the stack
                stack.pop()
                if not stack:
                    # If the stack is empty, push the current index as the new base
                    stack.append(i)
                else:
                    # Calculate the length of the current valid substring
                    max_length = max(max_length, i - stack[-1])

        return max_length

